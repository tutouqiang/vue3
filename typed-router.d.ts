/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...path]': RouteRecordInfo<'/[...path]', '/:path(.*)', { path: ParamValue<true> }, { path: ParamValue<false> }>,
    '/about': RouteRecordInfo<'/about', '/about', Record<never, never>, Record<never, never>>,
    '/blog/': RouteRecordInfo<'/blog/', '/blog', Record<never, never>, Record<never, never>>,
    '/blog/front-end/block': RouteRecordInfo<'/blog/front-end/block', '/blog/front-end/block', Record<never, never>, Record<never, never>>,
    '/blog/front-end/configure': RouteRecordInfo<'/blog/front-end/configure', '/blog/front-end/configure', Record<never, never>, Record<never, never>>,
    '/blog/front-end/foundation-npm': RouteRecordInfo<'/blog/front-end/foundation-npm', '/blog/front-end/foundation-npm', Record<never, never>, Record<never, never>>,
    '/blog/front-end/gateway': RouteRecordInfo<'/blog/front-end/gateway', '/blog/front-end/gateway', Record<never, never>, Record<never, never>>,
    '/blog/front-end/git': RouteRecordInfo<'/blog/front-end/git', '/blog/front-end/git', Record<never, never>, Record<never, never>>,
    '/blog/front-end/mac-command': RouteRecordInfo<'/blog/front-end/mac-command', '/blog/front-end/mac-command', Record<never, never>, Record<never, never>>,
    '/blog/front-end/npm-warehouse': RouteRecordInfo<'/blog/front-end/npm-warehouse', '/blog/front-end/npm-warehouse', Record<never, never>, Record<never, never>>,
    '/blog/front-end/responsive-layout': RouteRecordInfo<'/blog/front-end/responsive-layout', '/blog/front-end/responsive-layout', Record<never, never>, Record<never, never>>,
    '/blog/front-end/vs-code': RouteRecordInfo<'/blog/front-end/vs-code', '/blog/front-end/vs-code', Record<never, never>, Record<never, never>>,
    '/blog/front-end/weakup': RouteRecordInfo<'/blog/front-end/weakup', '/blog/front-end/weakup', Record<never, never>, Record<never, never>>,
    '/blog/front-end/website-perf': RouteRecordInfo<'/blog/front-end/website-perf', '/blog/front-end/website-perf', Record<never, never>, Record<never, never>>,
    '/blog/front-end/webssh': RouteRecordInfo<'/blog/front-end/webssh', '/blog/front-end/webssh', Record<never, never>, Record<never, never>>,
    '/blog/source-code-analysis/cli-spinners': RouteRecordInfo<'/blog/source-code-analysis/cli-spinners', '/blog/source-code-analysis/cli-spinners', Record<never, never>, Record<never, never>>,
    '/blog/source-code-analysis/husky': RouteRecordInfo<'/blog/source-code-analysis/husky', '/blog/source-code-analysis/husky', Record<never, never>, Record<never, never>>,
    '/blog/source-code-analysis/i18next': RouteRecordInfo<'/blog/source-code-analysis/i18next', '/blog/source-code-analysis/i18next', Record<never, never>, Record<never, never>>,
    '/blog/source-code-analysis/ora': RouteRecordInfo<'/blog/source-code-analysis/ora', '/blog/source-code-analysis/ora', Record<never, never>, Record<never, never>>,
    '/blog/source-code-analysis/read-source-code': RouteRecordInfo<'/blog/source-code-analysis/read-source-code', '/blog/source-code-analysis/read-source-code', Record<never, never>, Record<never, never>>,
    '/blog/system/mac-config': RouteRecordInfo<'/blog/system/mac-config', '/blog/system/mac-config', Record<never, never>, Record<never, never>>,
    '/blog/system/nginx': RouteRecordInfo<'/blog/system/nginx', '/blog/system/nginx', Record<never, never>, Record<never, never>>,
    '/blog/system/ubuntu': RouteRecordInfo<'/blog/system/ubuntu', '/blog/system/ubuntu', Record<never, never>, Record<never, never>>,
    '/blog/system/web-server-deploy': RouteRecordInfo<'/blog/system/web-server-deploy', '/blog/system/web-server-deploy', Record<never, never>, Record<never, never>>,
    '/home/': RouteRecordInfo<'/home/', '/home', Record<never, never>, Record<never, never>>,
    '/tools/': RouteRecordInfo<'/tools/', '/tools', Record<never, never>, Record<never, never>>,
    '/tools/wake_up/': RouteRecordInfo<'/tools/wake_up/', '/tools/wake_up', Record<never, never>, Record<never, never>>,
    '/website/': RouteRecordInfo<'/website/', '/website', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
